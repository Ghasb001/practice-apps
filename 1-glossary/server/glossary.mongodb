// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
//use('Glossary');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
//db.glossaries.drop();

// Insert a few documents into the sales collection.
db.glossaries.insertMany([
  {'word': 'AARDVARK', 'definition': 'some animal thing', },
  {'word': 'FRUSTRATED', 'definition': 'me', },
  {'word': 'GULLIBLE', 'definition': 'Not an actual word (look it up)', },
  {'word': 'ZEBRA', 'definition': 'striped animal thing', },
  {'word': 'REACT', 'definition': 'JSX', },
  {'word': 'HELLO', 'definition': 'darkness my old friend', },
  {'word': 'RUBBER DUCKING', 'definition': 'coding insanity', },
]);

//mongodb+srv://Ghasb001:HACKReactorRPP2209!@cluster0.jkoecfm.mongodb.net/glossary

// Run a find command to view items sold on April 4th, 2014.
// db.glossaries.find({});

// // Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// // Run the aggregation and open a cursor to the results.
// // Use toArray() to exhaust the cursor to return the whole result set.
// // You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
//module.exports.data = db.glossaries.find({});